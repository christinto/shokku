#%RAML 1.0

title: Shokku API
description: An Open Source Scalable Blockchain Infrastructure.
version: v1
baseUri: https://api.shokku.com/{version}
mediaType: application/json
protocols: [ HTTPS ]
securitySchemes:
  jwt:
    type: x-custom
    description: |
      Shokku supports JWT for authenticating all API requests.
    describedBy:
      headers:
        Authorization:
          description: |
            Used to send a valid JWT token. Do not use with the "access_token" query string parameter.
        type: string
      responses:
        401:
          description: |
            Bad or expired token. This can happen if the user or Shokku revoked or expired an access token. To fix, re-authenticate the user.

types:
  RPCMethodsResponse:
    type: object
    properties:
      get:
        type: array
        description: |
          List of methods supported by the /jsonrpc/{network}/{method} endpoint (GET)
        items: string
      post:
        type: array
        description: |
          List of methods supported by the /jsonrpc/{network} endpoint (POST)
        items: string

  RPCRequest:
    type: object
    properties:
      jsonrpc:
        type: string
        required: true
        enum:
          - "2.0"
      id:
        type: integer
        required: true
      method:
        type: string
        required: true
      params: array

  RPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        required: true
        enum:
          - "2.0"
      id:
        type: integer
        required: true
      result: string

  TickerSymbolsResponse:
    type: object
    properties:
      symbols:
        type: array
        description: |
          List of supported symbols (currency pairs)
        required: true
        items: string

  TickerSymbolResponse:
    type: object
    properties:
      base:
        type: string
        description: |
          Currency pair base
      quote:
        type: string
        description: |
          Currency pair quote
      bid:
        type: number
        description: |
          Bid at the exchange with the most volume
      ask:
        type: number
        description: |
          Ask at the exchange with the most volume
      exchange:
        type: string
        description: |
          The exchange with the most volume
      volume:
        type: number
        description: |
          Volume at the exchange with the most volume
      total_volume:
        type: number
        description: |
          Total volume across all exchanges queried
      timestamp:
        type: integer
        description: |
          Unix timestamp

  BlacklistResponse:
    type: array
    items: string

  StatusResponse:
    type: object
    properties:
      mainnet: string
      testnet: string


# securedBy: [ jwt ]

/services/jsonrpc/networks:
  get:
    description: |
      Returns an array of available networks to use.
    responses:
      200:
        description: |
          List of available networks to use
      500:
        description: |
          Server error

/jsonrpc/{network}/methods:
  uriParameters:
    network:
      description: The id of the network to use
      type: string
      required: true
      enum:
        - mainnet
        - testnet
  get:
    description: |
      The JSON-RPC methods supported by the `/jsonrpc/{network}/{method}` (GET) and `/jsonrpc/{network}` (POST) endpoints.
    responses:
      200:
        description: |
          List of available RPC methods to use
        body:
          application/json:
            type: RPCMethodsResponse
      500:
        description: |
          Server error

/jsonrpc/{network}/{method}:
  uriParameters:
    network:
      description: |
        The id of the network to use
      type: string
      required: true
      enum:
        - mainnet
        - testnet
    method:
      description: |
        JSON-RPC method. Use the `/jsonrpc/{network}/methods` endpoint to get the list of permitted methods.
      type: string
      required: true
      enum:
        - web3_clientVersion
        - net_version
        - net_listening
        - net_peerCount
        - eth_protocolVersion
        - eth_syncing
        - eth_mining
        - eth_hashrate
        - eth_gasPrice
        - eth_accounts
        - eth_blockNumber
        - eth_getBalance
        - eth_getStorageAt
        - eth_getTransactionCount
        - eth_getBlockTransactionCountByHash
        - eth_getBlockTransactionCountByNumber
        - eth_getUncleCountByBlockHash
        - eth_getUncleCountByBlockNumber
        - eth_getCode
        - eth_call
        - eth_getBlockByHash
        - eth_getBlockByNumber
        - eth_getTransactionByHash
        - eth_getTransactionByBlockHashAndIndex
        - eth_getTransactionByBlockNumberAndIndex
        - eth_getTransactionReceipt
        - eth_getUncleByBlockNumberAndIndex
        - eth_getUncleByBlockHashAndIndex
        - eth_getCompilers
        - eth_getLogs
        - eth_getWork
  get:
    description: |
      A request using an "HTTP GET-compatible" (non-state-changing) JSON-RPC method. Most Ubiq JSON-RPC methods can be described in this way, since they query the blockchain for various pieces of information. Use the `/jsonrpc/{network}/methods` endpoint to get the list of permitted methods.
    queryParameters:
      params:
        type: array
        required: false
    responses:
      200:
        description: |
          JSON RPC method response
        body:
          application/json:
            type: RPCResponse
      400:
        description: |
          Bad JSON in `params` query parameter
      404:
        description: |
          JSON-RPC method is not a valid GET method
      500:
        description: |
          Server error
      502:
        description: |
          Ubiq client error

/jsonrpc/{network}:
  uriParameters:
    network:
      description: |
        The id of the network
      type: string
      required: true
      enum:
        - mainnet
        - testnet
  post:
    description: |
      A request using an "HTTP POST-compatible" (state-changing) JSON-RPC method. Use the `/jsonrpc/{network}/methods` endpoint to get the list of permitted methods. Use the regular Ubiq JSON-RPC format for the POST body.
    body:
      type: RPCRequest
    responses:
      200:
        description: |
          JSON-RPC response
        body:
          application/json:
            type: RPCResponse
      400:
        description: |
          Bad JSON in POST body or missing Content-Type header
      404:
        description: |
          JSON-RPC method is not a valid POST method
      500:
        description: |
          Server error
      502:
        description: |
          Ubiq client error

/ticker/symbols:
  get:
    description: |
      Get a list of supported symbols (currency pairs), including fiat, crypto, and tokens.
    responses:
      200:
        description: |
          Symbols response
        body:
          application/json:
            type: TickerSymbolsResponse

/ticker/{symbol}:
  uriParameters:
    symbol:
      description: |
        The currency pair symbol you want to obtain value
      type: string
      required: true
      enum:
        - ubqusd
        - ubqeur
        - ubqbtc
        - ubqeth
        - ubqltc
  get:
    description: |
      Get pricing (ticker) data for various currency pairs (fiat, crypto, and tokens) using data from several exchanges. This endpoint shows the price at the exchange with the most volume for the symbol. Use the `/ticker/symbols` (GET) endpoint for the full list of supported symbols.
    responses:
      200:
        description: |
          Ticker response
        body:
          application/json:
            type: TickerSymbolResponse
      400:
        description: |
          Ticker method is not a valid param
      500:
        description: |
          Server error

/blacklist:
  get:
    description: |
      Return a blacklist of phishing sites. This list is maintained by Ubiq https://github.com/ubiq/blacklists .
    responses:
      200:
        description: |
          List of blacklisted phishing domains
        body:
          application/json:
            type: BlacklistResponse

/status:
  get:
    description: |
      Returns the status of the network.
    responses:
      200:
        description: |
          Status of the network. OK everything is good. Failing we're having issues.
        body:
          application/json:
            type: StatusResponse
